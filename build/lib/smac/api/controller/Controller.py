#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
import smac.api.base.Module
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None

from zope.interface import Interface, implements
from twisted.internet import defer
from thrift.transport import TTwisted

class Iface(smac.api.base.Module.Iface):
  """
  The controller interface. This class exposes two different typologies of
  methods:
  1) the controller-modules interface, intended to let the controller
     communicate with all others modules on the system, and
  2) the controller-web client interface, intended to let the web
     administration interface interact with the controller (and thus with the
     whole system)
  """
  def get_connected_module_list(refresh):
    """
    Pings the whole system to get an overview of the currently active and
    connected modules.
    
    Parameters:
     - refresh
    """
    pass

  def announce(module_info):
    """
    Callback to be called by the consumers when joining the system
    
    Parameters:
     - module_info
    """
    pass

  def ping_reply(module_info):
    """
    Callback to be called by all consumers reached by a ping command
    
    Parameters:
     - module_info
    """
    pass

  def receive_log_entry(module, log_entry):
    """
    Parameters:
     - module
     - log_entry
    """
    pass

  def get_module_log_stream(module, timeout, offset):
    """
    Parameters:
     - module
     - timeout
     - offset
    """
    pass


class Client(smac.api.base.Module.Client):
  implements(Iface)

  """
  The controller interface. This class exposes two different typologies of
  methods:
  1) the controller-modules interface, intended to let the controller
     communicate with all others modules on the system, and
  2) the controller-web client interface, intended to let the web
     administration interface interact with the controller (and thus with the
     whole system)
  """
  def __init__(self, transport, oprot_factory):
    smac.api.base.Module.Client.__init__(self, transport, oprot_factory)

  def get_connected_module_list(self, refresh):
    """
    Pings the whole system to get an overview of the currently active and
    connected modules.
    
    Parameters:
     - refresh
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_get_connected_module_list(refresh)
    return d

  def send_get_connected_module_list(self, refresh):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_connected_module_list', TMessageType.CALL, self._seqid)
    args = get_connected_module_list_args()
    args.refresh = refresh
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_connected_module_list(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_connected_module_list_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success != None:
      return d.callback(result.success)
    if result.e != None:
      return d.errback(result.e)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_connected_module_list failed: unknown result"))

  def announce(self, module_info):
    """
    Callback to be called by the consumers when joining the system
    
    Parameters:
     - module_info
    """
    self._seqid += 1
    self.send_announce(module_info)
    return defer.succeed(None)

  def send_announce(self, module_info):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('announce', TMessageType.CALL, self._seqid)
    args = announce_args()
    args.module_info = module_info
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()
  def ping_reply(self, module_info):
    """
    Callback to be called by all consumers reached by a ping command
    
    Parameters:
     - module_info
    """
    self._seqid += 1
    self.send_ping_reply(module_info)
    return defer.succeed(None)

  def send_ping_reply(self, module_info):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('ping_reply', TMessageType.CALL, self._seqid)
    args = ping_reply_args()
    args.module_info = module_info
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()
  def receive_log_entry(self, module, log_entry):
    """
    Parameters:
     - module
     - log_entry
    """
    self._seqid += 1
    self.send_receive_log_entry(module, log_entry)
    return defer.succeed(None)

  def send_receive_log_entry(self, module, log_entry):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('receive_log_entry', TMessageType.CALL, self._seqid)
    args = receive_log_entry_args()
    args.module = module
    args.log_entry = log_entry
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()
  def get_module_log_stream(self, module, timeout, offset):
    """
    Parameters:
     - module
     - timeout
     - offset
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_get_module_log_stream(module, timeout, offset)
    return d

  def send_get_module_log_stream(self, module, timeout, offset):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_module_log_stream', TMessageType.CALL, self._seqid)
    args = get_module_log_stream_args()
    args.module = module
    args.timeout = timeout
    args.offset = offset
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_module_log_stream(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_module_log_stream_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success != None:
      return d.callback(result.success)
    if result.unknown != None:
      return d.errback(result.unknown)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_module_log_stream failed: unknown result"))


class Processor(smac.api.base.Module.Processor, TProcessor):
  implements(Iface)

  def __init__(self, handler):
    smac.api.base.Module.Processor.__init__(self, Iface(handler))
    self._processMap["get_connected_module_list"] = Processor.process_get_connected_module_list
    self._processMap["announce"] = Processor.process_announce
    self._processMap["ping_reply"] = Processor.process_ping_reply
    self._processMap["receive_log_entry"] = Processor.process_receive_log_entry
    self._processMap["get_module_log_stream"] = Processor.process_get_module_log_stream

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return defer.succeed(None)
    else:
      return self._processMap[name](self, seqid, iprot, oprot)

  def process_get_connected_module_list(self, seqid, iprot, oprot):
    args = get_connected_module_list_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_connected_module_list_result()
    d = defer.maybeDeferred(self._handler.get_connected_module_list, args.refresh)
    d.addCallback(self.write_results_success_get_connected_module_list, result, seqid, oprot)
    d.addErrback(self.write_results_exception_get_connected_module_list, result, seqid, oprot)
    return d

  def write_results_success_get_connected_module_list(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_connected_module_list", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_get_connected_module_list(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except smac.api.base.ttypes.NotYetReady, e:
      result.e = e
    oprot.writeMessageBegin("get_connected_module_list", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_announce(self, seqid, iprot, oprot):
    args = announce_args()
    args.read(iprot)
    iprot.readMessageEnd()
    d = defer.maybeDeferred(self._handler.announce, args.module_info)
    return d

  def process_ping_reply(self, seqid, iprot, oprot):
    args = ping_reply_args()
    args.read(iprot)
    iprot.readMessageEnd()
    d = defer.maybeDeferred(self._handler.ping_reply, args.module_info)
    return d

  def process_receive_log_entry(self, seqid, iprot, oprot):
    args = receive_log_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    d = defer.maybeDeferred(self._handler.receive_log_entry, args.module, args.log_entry)
    return d

  def process_get_module_log_stream(self, seqid, iprot, oprot):
    args = get_module_log_stream_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_module_log_stream_result()
    d = defer.maybeDeferred(self._handler.get_module_log_stream, args.module, args.timeout, args.offset)
    d.addCallback(self.write_results_success_get_module_log_stream, result, seqid, oprot)
    d.addErrback(self.write_results_exception_get_module_log_stream, result, seqid, oprot)
    return d

  def write_results_success_get_module_log_stream(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_module_log_stream", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_get_module_log_stream(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except smac.api.base.ttypes.UnknownModule, unknown:
      result.unknown = unknown
    oprot.writeMessageBegin("get_module_log_stream", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class get_connected_module_list_args:
  """
  Attributes:
   - refresh
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'refresh', None, None, ), # 1
  )

  def __init__(self, refresh=None,):
    self.refresh = refresh

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.refresh = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_connected_module_list_args')
    if self.refresh != None:
      oprot.writeFieldBegin('refresh', TType.BOOL, 1)
      oprot.writeBool(self.refresh)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_connected_module_list_result:
  """
  Attributes:
   - success
   - e
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(smac.api.base.ttypes.GeneralModuleInfo, smac.api.base.ttypes.GeneralModuleInfo.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'e', (smac.api.base.ttypes.NotYetReady, smac.api.base.ttypes.NotYetReady.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, e=None,):
    self.success = success
    self.e = e

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = smac.api.base.ttypes.GeneralModuleInfo()
            _elem5.read(iprot)
            self.success.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.e = smac.api.base.ttypes.NotYetReady()
          self.e.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_connected_module_list_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter6 in self.success:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.e != None:
      oprot.writeFieldBegin('e', TType.STRUCT, 1)
      self.e.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class announce_args:
  """
  Attributes:
   - module_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'module_info', (smac.api.base.ttypes.GeneralModuleInfo, smac.api.base.ttypes.GeneralModuleInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, module_info=None,):
    self.module_info = module_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.module_info = smac.api.base.ttypes.GeneralModuleInfo()
          self.module_info.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('announce_args')
    if self.module_info != None:
      oprot.writeFieldBegin('module_info', TType.STRUCT, 1)
      self.module_info.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ping_reply_args:
  """
  Attributes:
   - module_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'module_info', (smac.api.base.ttypes.GeneralModuleInfo, smac.api.base.ttypes.GeneralModuleInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, module_info=None,):
    self.module_info = module_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.module_info = smac.api.base.ttypes.GeneralModuleInfo()
          self.module_info.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ping_reply_args')
    if self.module_info != None:
      oprot.writeFieldBegin('module_info', TType.STRUCT, 1)
      self.module_info.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class receive_log_entry_args:
  """
  Attributes:
   - module
   - log_entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'module', (smac.api.base.ttypes.ModuleAddress, smac.api.base.ttypes.ModuleAddress.thrift_spec), None, ), # 1
    (2, TType.STRING, 'log_entry', None, None, ), # 2
  )

  def __init__(self, module=None, log_entry=None,):
    self.module = module
    self.log_entry = log_entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.module = smac.api.base.ttypes.ModuleAddress()
          self.module.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.log_entry = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('receive_log_entry_args')
    if self.module != None:
      oprot.writeFieldBegin('module', TType.STRUCT, 1)
      self.module.write(oprot)
      oprot.writeFieldEnd()
    if self.log_entry != None:
      oprot.writeFieldBegin('log_entry', TType.STRING, 2)
      oprot.writeString(self.log_entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_module_log_stream_args:
  """
  Attributes:
   - module
   - timeout
   - offset
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'module', (smac.api.base.ttypes.ModuleAddress, smac.api.base.ttypes.ModuleAddress.thrift_spec), None, ), # 1
    (2, TType.I16, 'timeout', None, None, ), # 2
    (3, TType.I32, 'offset', None, None, ), # 3
  )

  def __init__(self, module=None, timeout=None, offset=None,):
    self.module = module
    self.timeout = timeout
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.module = smac.api.base.ttypes.ModuleAddress()
          self.module.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.timeout = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_module_log_stream_args')
    if self.module != None:
      oprot.writeFieldBegin('module', TType.STRUCT, 1)
      self.module.write(oprot)
      oprot.writeFieldEnd()
    if self.timeout != None:
      oprot.writeFieldBegin('timeout', TType.I16, 2)
      oprot.writeI16(self.timeout)
      oprot.writeFieldEnd()
    if self.offset != None:
      oprot.writeFieldBegin('offset', TType.I32, 3)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_module_log_stream_result:
  """
  Attributes:
   - success
   - unknown
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'unknown', (smac.api.base.ttypes.UnknownModule, smac.api.base.ttypes.UnknownModule.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, unknown=None,):
    self.success = success
    self.unknown = unknown

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString();
            self.success.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.unknown = smac.api.base.ttypes.UnknownModule()
          self.unknown.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_module_log_stream_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter13 in self.success:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.unknown != None:
      oprot.writeFieldBegin('unknown', TType.STRUCT, 1)
      self.unknown.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)


